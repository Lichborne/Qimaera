import numpy as np
from qiskit import QuantumCircuit


def Function0(circuit):  
	circuit.reset(0)
	circuit.reset(1)
	circuit.reset(2)
	return circuit


def Function1(circuit):  
	circuit.reset(3)
	circuit.reset(4)
	circuit.reset(5)
	circuit.reset(6)
	return circuit


def Function2(circuit):  
	circuit.h(3)
	circuit.p(np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(-np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(-0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.h(4)
	circuit.p(np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(-np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(-np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.h(5)
	circuit.p(np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(-np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.h(6)
	circuit.p(np.pi/2, 3)
	circuit.cx(0, 3)
	circuit.p(-np.pi/2, 3)
	circuit.cx(0, 3)
	circuit.p(np.pi/4, 3)
	circuit.cx(1, 3)
	circuit.p(-np.pi/4, 3)
	circuit.cx(1, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(2, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(2, 3)
	circuit.p(np.pi/2, 4)
	circuit.cx(1, 4)
	circuit.p(-np.pi/2, 4)
	circuit.cx(1, 4)
	circuit.p(np.pi/4, 4)
	circuit.cx(2, 4)
	circuit.p(-np.pi/4, 4)
	circuit.cx(2, 4)
	circuit.p(np.pi/2, 5)
	circuit.cx(2, 5)
	circuit.p(-np.pi/2, 5)
	circuit.cx(2, 5)
	circuit.h(6)
	circuit.cx(6, 5)
	circuit.p(np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(-np.pi/4, 5)
	circuit.h(5)
	circuit.cx(6, 4)
	circuit.p(np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(-np.pi/8, 4)
	circuit.cx(5, 4)
	circuit.p(np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(-np.pi/4, 4)
	circuit.h(4)
	circuit.cx(6, 3)
	circuit.p(0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(-0.19634954084936207, 3)
	circuit.cx(5, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(4, 3)
	circuit.p(np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(-np.pi/4, 3)
	circuit.h(3)
	return circuit


def AllUnitariesBeforeFunc3InOne(circuit):  
	circuit.h(3)
	circuit.p(np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(-np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(-0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.h(4)
	circuit.p(np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(-np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(-np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.h(5)
	circuit.p(np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(-np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.h(6)
	circuit.p(np.pi/2, 3)
	circuit.cx(0, 3)
	circuit.p(-np.pi/2, 3)
	circuit.cx(0, 3)
	circuit.p(np.pi/4, 3)
	circuit.cx(1, 3)
	circuit.p(-np.pi/4, 3)
	circuit.cx(1, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(2, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(2, 3)
	circuit.p(np.pi/2, 4)
	circuit.cx(1, 4)
	circuit.p(-np.pi/2, 4)
	circuit.cx(1, 4)
	circuit.p(np.pi/4, 4)
	circuit.cx(2, 4)
	circuit.p(-np.pi/4, 4)
	circuit.cx(2, 4)
	circuit.p(np.pi/2, 5)
	circuit.cx(2, 5)
	circuit.p(-np.pi/2, 5)
	circuit.cx(2, 5)
	circuit.h(6)
	circuit.cx(6, 5)
	circuit.p(np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(-np.pi/4, 5)
	circuit.h(5)
	circuit.cx(6, 4)
	circuit.p(np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(-np.pi/8, 4)
	circuit.cx(5, 4)
	circuit.p(np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(-np.pi/4, 4)
	circuit.h(4)
	circuit.cx(6, 3)
	circuit.p(0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(-0.19634954084936207, 3)
	circuit.cx(5, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(4, 3)
	circuit.p(np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(-np.pi/4, 3)
	circuit.h(3)
	return circuit


def AllFunctionsBefore3(circuit): 
	Function0(circuit)
	Function1(circuit)
	Function2(circuit)
	return circuit


def Function3(circuit): 
	circuit.measure_all()
	return circuit

def OutputCircuit(n):  
	circuit = QuantumCircuit(n, n)
	Function0(circuit)
	Function1(circuit)
	Function2(circuit)
	Function3(circuit)
	return circuit

qc = OutputCircuit(7)