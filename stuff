
export
differentFin: {n: Nat} -> {i: Fin n} -> (x : Fin (finToNat i)) -> (m : Fin (finToNat i)) -> 
              (xs : Vect (finToNat i) (Fin n)) -> {prf2 : isDifferentFinFin i x xs = True} ->
              ((finToNat x /= finToNat (index m xs)) = True)
--differentFin x FZ (ys) impossible --= ?h --lemmaAndLeft prf2
differentFin {n} {i} x k ys = ?h1 --differentFin x k ys (finFSApp (finToNat i) (FS k)) {prf2 = lemmaAndRight prf2}
{-}
export
differentFin: {n: Nat} -> {i: Fin n} -> (x : Fin n) -> (m : Fin n) -> 
              (xs : Vect (finToNat i) (Fin n)) -> {prf2 : isDifferentFinFin i x xs = True} ->
              ((x = index m xs) -> Void)
differentFin x 0 (y :: xs) = lemmaAndLeft prf2
differentFin {n} {i} x (FS k) (y :: xs) = differentFin x k xs (finFSApp (finToNat i) (FS k)) {prf2 = lemmaAndRight prf2}
-}

private
differentFin' : {n:Nat} -> {i:Fin n} -> (x : Fin (finToNat i)) -> (m : Fin (finToNat i)) -> (xs : Vect (finToNat i) (Fin n)) ->
                {prf2 : isDifferentFinFin i x xs = True} -> ((finToNat (index m xs) /= finToNat x) = True)
differentFin' x m xs = lemmaSymDiff (differentFin x m xs {prf2})
