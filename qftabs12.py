import numpy as np
from qiskit import QuantumCircuit


def Function0(circuit):  
	circuit.reset(0)
	circuit.reset(1)
	circuit.reset(2)
	circuit.reset(3)
	circuit.reset(4)
	circuit.reset(5)
	circuit.reset(6)
	circuit.reset(7)
	circuit.reset(8)
	circuit.reset(9)
	circuit.reset(10)
	circuit.reset(11)
	return circuit


def Function1(circuit):  
	circuit.h(0)
	circuit.p(np.pi/4, 0)
	circuit.cx(1, 0)
	circuit.p(-np.pi/4, 0)
	circuit.cx(1, 0)
	circuit.p(np.pi/8, 0)
	circuit.cx(2, 0)
	circuit.p(-np.pi/8, 0)
	circuit.cx(2, 0)
	circuit.p(0.19634954084936207, 0)
	circuit.cx(3, 0)
	circuit.p(-0.19634954084936207, 0)
	circuit.cx(3, 0)
	circuit.p(0.09817477042468103, 0)
	circuit.cx(4, 0)
	circuit.p(-0.09817477042468103, 0)
	circuit.cx(4, 0)
	circuit.p(0.04908738521234052, 0)
	circuit.cx(5, 0)
	circuit.p(-0.04908738521234052, 0)
	circuit.cx(5, 0)
	circuit.p(0.02454369260617026, 0)
	circuit.cx(6, 0)
	circuit.p(-0.02454369260617026, 0)
	circuit.cx(6, 0)
	circuit.p(0.01227184630308513, 0)
	circuit.cx(7, 0)
	circuit.p(-0.01227184630308513, 0)
	circuit.cx(7, 0)
	circuit.p(0.006135923151542565, 0)
	circuit.cx(8, 0)
	circuit.p(-0.006135923151542565, 0)
	circuit.cx(8, 0)
	circuit.p(0.0030679615757712823, 0)
	circuit.cx(9, 0)
	circuit.p(-0.0030679615757712823, 0)
	circuit.cx(9, 0)
	circuit.p(0.0015339807878856412, 0)
	circuit.cx(10, 0)
	circuit.p(-0.0015339807878856412, 0)
	circuit.cx(10, 0)
	circuit.p(7.669903939428206e-4, 0)
	circuit.cx(11, 0)
	circuit.p(-7.669903939428206e-4, 0)
	circuit.cx(11, 0)
	circuit.h(1)
	circuit.p(np.pi/4, 1)
	circuit.cx(2, 1)
	circuit.p(-np.pi/4, 1)
	circuit.cx(2, 1)
	circuit.p(np.pi/8, 1)
	circuit.cx(3, 1)
	circuit.p(-np.pi/8, 1)
	circuit.cx(3, 1)
	circuit.p(0.19634954084936207, 1)
	circuit.cx(4, 1)
	circuit.p(-0.19634954084936207, 1)
	circuit.cx(4, 1)
	circuit.p(0.09817477042468103, 1)
	circuit.cx(5, 1)
	circuit.p(-0.09817477042468103, 1)
	circuit.cx(5, 1)
	circuit.p(0.04908738521234052, 1)
	circuit.cx(6, 1)
	circuit.p(-0.04908738521234052, 1)
	circuit.cx(6, 1)
	circuit.p(0.02454369260617026, 1)
	circuit.cx(7, 1)
	circuit.p(-0.02454369260617026, 1)
	circuit.cx(7, 1)
	circuit.p(0.01227184630308513, 1)
	circuit.cx(8, 1)
	circuit.p(-0.01227184630308513, 1)
	circuit.cx(8, 1)
	circuit.p(0.006135923151542565, 1)
	circuit.cx(9, 1)
	circuit.p(-0.006135923151542565, 1)
	circuit.cx(9, 1)
	circuit.p(0.0030679615757712823, 1)
	circuit.cx(10, 1)
	circuit.p(-0.0030679615757712823, 1)
	circuit.cx(10, 1)
	circuit.p(0.0015339807878856412, 1)
	circuit.cx(11, 1)
	circuit.p(-0.0015339807878856412, 1)
	circuit.cx(11, 1)
	circuit.h(2)
	circuit.p(np.pi/4, 2)
	circuit.cx(3, 2)
	circuit.p(-np.pi/4, 2)
	circuit.cx(3, 2)
	circuit.p(np.pi/8, 2)
	circuit.cx(4, 2)
	circuit.p(-np.pi/8, 2)
	circuit.cx(4, 2)
	circuit.p(0.19634954084936207, 2)
	circuit.cx(5, 2)
	circuit.p(-0.19634954084936207, 2)
	circuit.cx(5, 2)
	circuit.p(0.09817477042468103, 2)
	circuit.cx(6, 2)
	circuit.p(-0.09817477042468103, 2)
	circuit.cx(6, 2)
	circuit.p(0.04908738521234052, 2)
	circuit.cx(7, 2)
	circuit.p(-0.04908738521234052, 2)
	circuit.cx(7, 2)
	circuit.p(0.02454369260617026, 2)
	circuit.cx(8, 2)
	circuit.p(-0.02454369260617026, 2)
	circuit.cx(8, 2)
	circuit.p(0.01227184630308513, 2)
	circuit.cx(9, 2)
	circuit.p(-0.01227184630308513, 2)
	circuit.cx(9, 2)
	circuit.p(0.006135923151542565, 2)
	circuit.cx(10, 2)
	circuit.p(-0.006135923151542565, 2)
	circuit.cx(10, 2)
	circuit.p(0.0030679615757712823, 2)
	circuit.cx(11, 2)
	circuit.p(-0.0030679615757712823, 2)
	circuit.cx(11, 2)
	circuit.h(3)
	circuit.p(np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(-np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(-0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(0.09817477042468103, 3)
	circuit.cx(7, 3)
	circuit.p(-0.09817477042468103, 3)
	circuit.cx(7, 3)
	circuit.p(0.04908738521234052, 3)
	circuit.cx(8, 3)
	circuit.p(-0.04908738521234052, 3)
	circuit.cx(8, 3)
	circuit.p(0.02454369260617026, 3)
	circuit.cx(9, 3)
	circuit.p(-0.02454369260617026, 3)
	circuit.cx(9, 3)
	circuit.p(0.01227184630308513, 3)
	circuit.cx(10, 3)
	circuit.p(-0.01227184630308513, 3)
	circuit.cx(10, 3)
	circuit.p(0.006135923151542565, 3)
	circuit.cx(11, 3)
	circuit.p(-0.006135923151542565, 3)
	circuit.cx(11, 3)
	circuit.h(4)
	circuit.p(np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(-np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(-np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(0.19634954084936207, 4)
	circuit.cx(7, 4)
	circuit.p(-0.19634954084936207, 4)
	circuit.cx(7, 4)
	circuit.p(0.09817477042468103, 4)
	circuit.cx(8, 4)
	circuit.p(-0.09817477042468103, 4)
	circuit.cx(8, 4)
	circuit.p(0.04908738521234052, 4)
	circuit.cx(9, 4)
	circuit.p(-0.04908738521234052, 4)
	circuit.cx(9, 4)
	circuit.p(0.02454369260617026, 4)
	circuit.cx(10, 4)
	circuit.p(-0.02454369260617026, 4)
	circuit.cx(10, 4)
	circuit.p(0.01227184630308513, 4)
	circuit.cx(11, 4)
	circuit.p(-0.01227184630308513, 4)
	circuit.cx(11, 4)
	circuit.h(5)
	circuit.p(np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(-np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(np.pi/8, 5)
	circuit.cx(7, 5)
	circuit.p(-np.pi/8, 5)
	circuit.cx(7, 5)
	circuit.p(0.19634954084936207, 5)
	circuit.cx(8, 5)
	circuit.p(-0.19634954084936207, 5)
	circuit.cx(8, 5)
	circuit.p(0.09817477042468103, 5)
	circuit.cx(9, 5)
	circuit.p(-0.09817477042468103, 5)
	circuit.cx(9, 5)
	circuit.p(0.04908738521234052, 5)
	circuit.cx(10, 5)
	circuit.p(-0.04908738521234052, 5)
	circuit.cx(10, 5)
	circuit.p(0.02454369260617026, 5)
	circuit.cx(11, 5)
	circuit.p(-0.02454369260617026, 5)
	circuit.cx(11, 5)
	circuit.h(6)
	circuit.p(np.pi/4, 6)
	circuit.cx(7, 6)
	circuit.p(-np.pi/4, 6)
	circuit.cx(7, 6)
	circuit.p(np.pi/8, 6)
	circuit.cx(8, 6)
	circuit.p(-np.pi/8, 6)
	circuit.cx(8, 6)
	circuit.p(0.19634954084936207, 6)
	circuit.cx(9, 6)
	circuit.p(-0.19634954084936207, 6)
	circuit.cx(9, 6)
	circuit.p(0.09817477042468103, 6)
	circuit.cx(10, 6)
	circuit.p(-0.09817477042468103, 6)
	circuit.cx(10, 6)
	circuit.p(0.04908738521234052, 6)
	circuit.cx(11, 6)
	circuit.p(-0.04908738521234052, 6)
	circuit.cx(11, 6)
	circuit.h(7)
	circuit.p(np.pi/4, 7)
	circuit.cx(8, 7)
	circuit.p(-np.pi/4, 7)
	circuit.cx(8, 7)
	circuit.p(np.pi/8, 7)
	circuit.cx(9, 7)
	circuit.p(-np.pi/8, 7)
	circuit.cx(9, 7)
	circuit.p(0.19634954084936207, 7)
	circuit.cx(10, 7)
	circuit.p(-0.19634954084936207, 7)
	circuit.cx(10, 7)
	circuit.p(0.09817477042468103, 7)
	circuit.cx(11, 7)
	circuit.p(-0.09817477042468103, 7)
	circuit.cx(11, 7)
	circuit.h(8)
	circuit.p(np.pi/4, 8)
	circuit.cx(9, 8)
	circuit.p(-np.pi/4, 8)
	circuit.cx(9, 8)
	circuit.p(np.pi/8, 8)
	circuit.cx(10, 8)
	circuit.p(-np.pi/8, 8)
	circuit.cx(10, 8)
	circuit.p(0.19634954084936207, 8)
	circuit.cx(11, 8)
	circuit.p(-0.19634954084936207, 8)
	circuit.cx(11, 8)
	circuit.h(9)
	circuit.p(np.pi/4, 9)
	circuit.cx(10, 9)
	circuit.p(-np.pi/4, 9)
	circuit.cx(10, 9)
	circuit.p(np.pi/8, 9)
	circuit.cx(11, 9)
	circuit.p(-np.pi/8, 9)
	circuit.cx(11, 9)
	circuit.h(10)
	circuit.p(np.pi/4, 10)
	circuit.cx(11, 10)
	circuit.p(-np.pi/4, 10)
	circuit.cx(11, 10)
	circuit.h(11)
	return circuit


def AllUnitariesBeforeFunc2InOne(circuit):  
	circuit.h(0)
	circuit.p(np.pi/4, 0)
	circuit.cx(1, 0)
	circuit.p(-np.pi/4, 0)
	circuit.cx(1, 0)
	circuit.p(np.pi/8, 0)
	circuit.cx(2, 0)
	circuit.p(-np.pi/8, 0)
	circuit.cx(2, 0)
	circuit.p(0.19634954084936207, 0)
	circuit.cx(3, 0)
	circuit.p(-0.19634954084936207, 0)
	circuit.cx(3, 0)
	circuit.p(0.09817477042468103, 0)
	circuit.cx(4, 0)
	circuit.p(-0.09817477042468103, 0)
	circuit.cx(4, 0)
	circuit.p(0.04908738521234052, 0)
	circuit.cx(5, 0)
	circuit.p(-0.04908738521234052, 0)
	circuit.cx(5, 0)
	circuit.p(0.02454369260617026, 0)
	circuit.cx(6, 0)
	circuit.p(-0.02454369260617026, 0)
	circuit.cx(6, 0)
	circuit.p(0.01227184630308513, 0)
	circuit.cx(7, 0)
	circuit.p(-0.01227184630308513, 0)
	circuit.cx(7, 0)
	circuit.p(0.006135923151542565, 0)
	circuit.cx(8, 0)
	circuit.p(-0.006135923151542565, 0)
	circuit.cx(8, 0)
	circuit.p(0.0030679615757712823, 0)
	circuit.cx(9, 0)
	circuit.p(-0.0030679615757712823, 0)
	circuit.cx(9, 0)
	circuit.p(0.0015339807878856412, 0)
	circuit.cx(10, 0)
	circuit.p(-0.0015339807878856412, 0)
	circuit.cx(10, 0)
	circuit.p(7.669903939428206e-4, 0)
	circuit.cx(11, 0)
	circuit.p(-7.669903939428206e-4, 0)
	circuit.cx(11, 0)
	circuit.h(1)
	circuit.p(np.pi/4, 1)
	circuit.cx(2, 1)
	circuit.p(-np.pi/4, 1)
	circuit.cx(2, 1)
	circuit.p(np.pi/8, 1)
	circuit.cx(3, 1)
	circuit.p(-np.pi/8, 1)
	circuit.cx(3, 1)
	circuit.p(0.19634954084936207, 1)
	circuit.cx(4, 1)
	circuit.p(-0.19634954084936207, 1)
	circuit.cx(4, 1)
	circuit.p(0.09817477042468103, 1)
	circuit.cx(5, 1)
	circuit.p(-0.09817477042468103, 1)
	circuit.cx(5, 1)
	circuit.p(0.04908738521234052, 1)
	circuit.cx(6, 1)
	circuit.p(-0.04908738521234052, 1)
	circuit.cx(6, 1)
	circuit.p(0.02454369260617026, 1)
	circuit.cx(7, 1)
	circuit.p(-0.02454369260617026, 1)
	circuit.cx(7, 1)
	circuit.p(0.01227184630308513, 1)
	circuit.cx(8, 1)
	circuit.p(-0.01227184630308513, 1)
	circuit.cx(8, 1)
	circuit.p(0.006135923151542565, 1)
	circuit.cx(9, 1)
	circuit.p(-0.006135923151542565, 1)
	circuit.cx(9, 1)
	circuit.p(0.0030679615757712823, 1)
	circuit.cx(10, 1)
	circuit.p(-0.0030679615757712823, 1)
	circuit.cx(10, 1)
	circuit.p(0.0015339807878856412, 1)
	circuit.cx(11, 1)
	circuit.p(-0.0015339807878856412, 1)
	circuit.cx(11, 1)
	circuit.h(2)
	circuit.p(np.pi/4, 2)
	circuit.cx(3, 2)
	circuit.p(-np.pi/4, 2)
	circuit.cx(3, 2)
	circuit.p(np.pi/8, 2)
	circuit.cx(4, 2)
	circuit.p(-np.pi/8, 2)
	circuit.cx(4, 2)
	circuit.p(0.19634954084936207, 2)
	circuit.cx(5, 2)
	circuit.p(-0.19634954084936207, 2)
	circuit.cx(5, 2)
	circuit.p(0.09817477042468103, 2)
	circuit.cx(6, 2)
	circuit.p(-0.09817477042468103, 2)
	circuit.cx(6, 2)
	circuit.p(0.04908738521234052, 2)
	circuit.cx(7, 2)
	circuit.p(-0.04908738521234052, 2)
	circuit.cx(7, 2)
	circuit.p(0.02454369260617026, 2)
	circuit.cx(8, 2)
	circuit.p(-0.02454369260617026, 2)
	circuit.cx(8, 2)
	circuit.p(0.01227184630308513, 2)
	circuit.cx(9, 2)
	circuit.p(-0.01227184630308513, 2)
	circuit.cx(9, 2)
	circuit.p(0.006135923151542565, 2)
	circuit.cx(10, 2)
	circuit.p(-0.006135923151542565, 2)
	circuit.cx(10, 2)
	circuit.p(0.0030679615757712823, 2)
	circuit.cx(11, 2)
	circuit.p(-0.0030679615757712823, 2)
	circuit.cx(11, 2)
	circuit.h(3)
	circuit.p(np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(-np.pi/4, 3)
	circuit.cx(4, 3)
	circuit.p(np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(-np.pi/8, 3)
	circuit.cx(5, 3)
	circuit.p(0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(-0.19634954084936207, 3)
	circuit.cx(6, 3)
	circuit.p(0.09817477042468103, 3)
	circuit.cx(7, 3)
	circuit.p(-0.09817477042468103, 3)
	circuit.cx(7, 3)
	circuit.p(0.04908738521234052, 3)
	circuit.cx(8, 3)
	circuit.p(-0.04908738521234052, 3)
	circuit.cx(8, 3)
	circuit.p(0.02454369260617026, 3)
	circuit.cx(9, 3)
	circuit.p(-0.02454369260617026, 3)
	circuit.cx(9, 3)
	circuit.p(0.01227184630308513, 3)
	circuit.cx(10, 3)
	circuit.p(-0.01227184630308513, 3)
	circuit.cx(10, 3)
	circuit.p(0.006135923151542565, 3)
	circuit.cx(11, 3)
	circuit.p(-0.006135923151542565, 3)
	circuit.cx(11, 3)
	circuit.h(4)
	circuit.p(np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(-np.pi/4, 4)
	circuit.cx(5, 4)
	circuit.p(np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(-np.pi/8, 4)
	circuit.cx(6, 4)
	circuit.p(0.19634954084936207, 4)
	circuit.cx(7, 4)
	circuit.p(-0.19634954084936207, 4)
	circuit.cx(7, 4)
	circuit.p(0.09817477042468103, 4)
	circuit.cx(8, 4)
	circuit.p(-0.09817477042468103, 4)
	circuit.cx(8, 4)
	circuit.p(0.04908738521234052, 4)
	circuit.cx(9, 4)
	circuit.p(-0.04908738521234052, 4)
	circuit.cx(9, 4)
	circuit.p(0.02454369260617026, 4)
	circuit.cx(10, 4)
	circuit.p(-0.02454369260617026, 4)
	circuit.cx(10, 4)
	circuit.p(0.01227184630308513, 4)
	circuit.cx(11, 4)
	circuit.p(-0.01227184630308513, 4)
	circuit.cx(11, 4)
	circuit.h(5)
	circuit.p(np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(-np.pi/4, 5)
	circuit.cx(6, 5)
	circuit.p(np.pi/8, 5)
	circuit.cx(7, 5)
	circuit.p(-np.pi/8, 5)
	circuit.cx(7, 5)
	circuit.p(0.19634954084936207, 5)
	circuit.cx(8, 5)
	circuit.p(-0.19634954084936207, 5)
	circuit.cx(8, 5)
	circuit.p(0.09817477042468103, 5)
	circuit.cx(9, 5)
	circuit.p(-0.09817477042468103, 5)
	circuit.cx(9, 5)
	circuit.p(0.04908738521234052, 5)
	circuit.cx(10, 5)
	circuit.p(-0.04908738521234052, 5)
	circuit.cx(10, 5)
	circuit.p(0.02454369260617026, 5)
	circuit.cx(11, 5)
	circuit.p(-0.02454369260617026, 5)
	circuit.cx(11, 5)
	circuit.h(6)
	circuit.p(np.pi/4, 6)
	circuit.cx(7, 6)
	circuit.p(-np.pi/4, 6)
	circuit.cx(7, 6)
	circuit.p(np.pi/8, 6)
	circuit.cx(8, 6)
	circuit.p(-np.pi/8, 6)
	circuit.cx(8, 6)
	circuit.p(0.19634954084936207, 6)
	circuit.cx(9, 6)
	circuit.p(-0.19634954084936207, 6)
	circuit.cx(9, 6)
	circuit.p(0.09817477042468103, 6)
	circuit.cx(10, 6)
	circuit.p(-0.09817477042468103, 6)
	circuit.cx(10, 6)
	circuit.p(0.04908738521234052, 6)
	circuit.cx(11, 6)
	circuit.p(-0.04908738521234052, 6)
	circuit.cx(11, 6)
	circuit.h(7)
	circuit.p(np.pi/4, 7)
	circuit.cx(8, 7)
	circuit.p(-np.pi/4, 7)
	circuit.cx(8, 7)
	circuit.p(np.pi/8, 7)
	circuit.cx(9, 7)
	circuit.p(-np.pi/8, 7)
	circuit.cx(9, 7)
	circuit.p(0.19634954084936207, 7)
	circuit.cx(10, 7)
	circuit.p(-0.19634954084936207, 7)
	circuit.cx(10, 7)
	circuit.p(0.09817477042468103, 7)
	circuit.cx(11, 7)
	circuit.p(-0.09817477042468103, 7)
	circuit.cx(11, 7)
	circuit.h(8)
	circuit.p(np.pi/4, 8)
	circuit.cx(9, 8)
	circuit.p(-np.pi/4, 8)
	circuit.cx(9, 8)
	circuit.p(np.pi/8, 8)
	circuit.cx(10, 8)
	circuit.p(-np.pi/8, 8)
	circuit.cx(10, 8)
	circuit.p(0.19634954084936207, 8)
	circuit.cx(11, 8)
	circuit.p(-0.19634954084936207, 8)
	circuit.cx(11, 8)
	circuit.h(9)
	circuit.p(np.pi/4, 9)
	circuit.cx(10, 9)
	circuit.p(-np.pi/4, 9)
	circuit.cx(10, 9)
	circuit.p(np.pi/8, 9)
	circuit.cx(11, 9)
	circuit.p(-np.pi/8, 9)
	circuit.cx(11, 9)
	circuit.h(10)
	circuit.p(np.pi/4, 10)
	circuit.cx(11, 10)
	circuit.p(-np.pi/4, 10)
	circuit.cx(11, 10)
	circuit.h(11)
	return circuit


def AllFunctionsBefore2(circuit): 
	Function0(circuit)
	Function1(circuit)
	return circuit


def Function2(circuit): 
	circuit.measure_all()
	return circuit

def OutputCircuit(n):  
	circuit = QuantumCircuit(n, n)
	Function0(circuit)
	Function1(circuit)
	Function2(circuit)
	return circuit

qc = OutputCircuit(12)

print(qc)